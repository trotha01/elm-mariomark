Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var input = function () {
      var _ = $Debug.watch("fps")({_: {}
                                  ,fps$: $Time.fps(25)});
      var delta = A2($Signal.map,
      function (t) {
         return t / 20;
      },
      $Time.fps(25));
      return A2($Signal.sampleOn,
      delta,
      A5($Signal.map4,
      F4(function (v0,v1,v2,v3) {
         return {ctor: "_Tuple4"
                ,_0: v0
                ,_1: v1
                ,_2: v2
                ,_3: v3};
      }),
      delta,
      $Keyboard.arrows,
      $Window.dimensions,
      $Mouse.isDown));
   }();
   var marioImage = F2(function (height,
   mario) {
      return function () {
         var verb = _U.cmp(mario.y,
         0) > 0 ? "jump" : !_U.eq(mario.vx,
         0) ? "walk" : "stand";
         var src = A2($Basics._op["++"],
         "/imgs/mario/",
         A2($Basics._op["++"],
         verb,
         A2($Basics._op["++"],
         "/",
         A2($Basics._op["++"],
         mario.dir,
         ".gif"))));
         return $Graphics$Collage.move({ctor: "_Tuple2"
                                       ,_0: mario.x
                                       ,_1: mario.y + 62 - height / 2})($Debug.trace("mario")($Graphics$Collage.toForm(A3($Graphics$Element.image,
         35,
         35,
         src))));
      }();
   });
   var renders = F2(function (_v0,
   marios) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var $ = {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(_v0._0)
                         ,_1: $Basics.toFloat(_v0._1)},
                 w$ = $._0,
                 h$ = $._1;
                 return A3($Graphics$Collage.collage,
                 _v0._0,
                 _v0._1,
                 A2($List._op["::"],
                 $Graphics$Collage.filled(A3($Color.rgb,
                 174,
                 238,
                 238))(A2($Graphics$Collage.rect,
                 w$,
                 h$)),
                 A2($List._op["::"],
                 $Graphics$Collage.move({ctor: "_Tuple2"
                                        ,_0: 0
                                        ,_1: 24 - h$ / 2})($Graphics$Collage.filled(A3($Color.rgb,
                 74,
                 163,
                 41))(A2($Graphics$Collage.rect,
                 w$,
                 50))),
                 A2($List.map,
                 marioImage(h$),
                 marios))));
              }();}
         _U.badCase($moduleName,
         "between lines 76 and 81");
      }();
   });
   var bounds = F3(function (w,
   h,
   m) {
      return function () {
         var $ = _U.cmp($Basics.abs(m.x),
         $Basics.toFloat(w) / 2) > 0 ? {ctor: "_Tuple2"
                                       ,_0: 0 - m.vx
                                       ,_1: _U.eq(m.dir,
                                       "right") ? "left" : "right"} : {ctor: "_Tuple2"
                                                                      ,_0: m.vx
                                                                      ,_1: m.dir},
         vx = $._0,
         dir = $._1;
         return _U.replace([["vx",vx]
                           ,["dir",dir]],
         m);
      }();
   });
   var physics = F2(function (t,
   m) {
      return _U.replace([["x"
                         ,m.x + t * m.vx]
                        ,["y"
                         ,A2($Basics.max,
                         0,
                         m.y + t * m.vy)]],
      m);
   });
   var jump = F2(function (_v4,m) {
      return function () {
         return _U.cmp(_v4.y,
         0) > 0 && _U.eq(m.y,
         0) ? _U.replace([["vy",5]],
         m) : m;
      }();
   });
   var g = 5;
   var xVelocity = 8;
   var walk = F2(function (_v6,m) {
      return function () {
         return _U.replace([["vx"
                            ,!_U.eq(_v6.x,
                            0) ? $Basics.toFloat(_v6.x) * xVelocity : m.vx]
                           ,["dir"
                            ,_U.cmp(_v6.x,
                            0) < 0 ? "left" : _U.cmp(_v6.x,
                            0) > 0 ? "right" : m.dir]],
         m);
      }();
   });
   var bounceVelocity = 15;
   var gravity = F2(function (t,
   m) {
      return _U.cmp(m.y,
      0) > 0 ? _U.replace([["vy"
                           ,m.vy - t / g]],
      m) : _U.replace([["vy"
                       ,bounceVelocity]],
      m);
   });
   var step = F2(function (_v8,
   mario) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple3":
            switch (_v8._2.ctor)
              {case "_Tuple2":
                 return $Debug.watch("mario")(A2(bounds,
                   _v8._2._0,
                   _v8._2._1)(physics(_v8._0)(gravity(_v8._0)(mario))));}
              break;}
         _U.badCase($moduleName,
         "between lines 51 and 57");
      }();
   });
   var mario0 = {_: {}
                ,dir: "right"
                ,vx: xVelocity
                ,vy: 0
                ,x: -10
                ,y: 100};
   var update = F2(function (_v15,
   marios) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple4":
            switch (_v15._2.ctor)
              {case "_Tuple2":
                 return function () {
                      var update$ = step({ctor: "_Tuple3"
                                         ,_0: _v15._0
                                         ,_1: _v15._1
                                         ,_2: {ctor: "_Tuple2"
                                              ,_0: _v15._2._0
                                              ,_1: _v15._2._1}});
                      var marios$ = _v15._3 ? A2($List._op["::"],
                      mario0,
                      marios) : marios;
                      var _ = $Debug.watch("Mario Count: ")({_: {}
                                                            ,marioCount: $List.length(marios$)});
                      return A2($List.map,
                      update$,
                      marios$);
                   }();}
              break;}
         _U.badCase($moduleName,
         "between lines 43 and 47");
      }();
   });
   var main = A3($Signal.map2,
   renders,
   $Window.dimensions,
   A3($Signal.foldp,
   update,
   _L.fromArray([mario0]),
   input));
   var ArrowKeys = F2(function (a,
   b) {
      return {_: {},x: a,y: b};
   });
   var Mario = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,dir: e
             ,vx: c
             ,vy: d
             ,x: a
             ,y: b};
   });
   _elm.Main.values = {_op: _op
                      ,Mario: Mario
                      ,ArrowKeys: ArrowKeys
                      ,mario0: mario0
                      ,bounceVelocity: bounceVelocity
                      ,xVelocity: xVelocity
                      ,g: g
                      ,jump: jump
                      ,gravity: gravity
                      ,physics: physics
                      ,walk: walk
                      ,bounds: bounds
                      ,update: update
                      ,step: step
                      ,marioImage: marioImage
                      ,renders: renders
                      ,input: input
                      ,main: main};
   return _elm.Main.values;
};